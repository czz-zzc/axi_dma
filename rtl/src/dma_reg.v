// Filename          : dma_reg.v.v
// Author            : czz
// Created           : 2025-06-10 22:37:20
// Description       : This file is auto generated by gen_reg.py script. Not edit by hand
//                   : addr_width = 12
//                   : bus_type   = regbus
//                   : base_addr  = 32'h0000

module dma_reg (
input               clk,
input               rst_n,
input       [11:0]  reg_addr,
input               wr_en,
input               rd_en,
input       [3 :0]  wr_msk,
input       [31:0]  wr_data,
output reg  [31:0]  rd_data,
output reg  [07:0]  csr_dma_maxburst,
output reg          csr_dma_start,
input       [15:0]  csr_dma_version,
input       [01:0]  csr_dma_status,
input               csr_dma_err,
input               csr_dma_done,
output reg          csr_dma_err_clr,
input       [01:0]  csr_dma_err_type,
input       [31:0]  csr_dma_err_addr,
output reg          csr_desc_read_mode[1:0],
output reg          csr_desc_write_mode[1:0],
output reg          csr_desc_enable[1:0],
output reg  [31:0]  csr_desc_num_bytes[1:0],
output reg  [31:0]  csr_desc_src_addr[1:0],
output reg  [31:0]  csr_desc_dst_addr[1:0],
output reg  [31:0]  csr_desc_read_jump_bytes[1:0],
output reg  [31:0]  csr_desc_write_jump_bytes[1:0]
);

//============================================================================
// reg and wire declaration
//============================================================================
reg  [31:0]    rd_data_nxt ;
wire [31:0]    msk;
wire           wr_en_DMA_CTRL;
wire           wr_en_DMA_ERR_CLR;
reg  [31:0]    rd_data_nxt_DMA_DESC_MODE;
wire           wr_en_DMA_DESC_MODE[1:0];
reg  [31:0]    rd_data_nxt_DMA_DESC_LENGTH;
wire           wr_en_DMA_DESC_LENGTH[1:0];
reg  [31:0]    rd_data_nxt_DMA_DESC_SRC_ADDR;
wire           wr_en_DMA_DESC_SRC_ADDR[1:0];
reg  [31:0]    rd_data_nxt_DMA_DESC_DST_ADDR;
wire           wr_en_DMA_DESC_DST_ADDR[1:0];
reg  [31:0]    rd_data_nxt_DMA_DESC_READ_JUMP_LENGTH;
wire           wr_en_DMA_DESC_READ_JUMP_LENGTH[1:0];
reg  [31:0]    rd_data_nxt_DMA_DESC_WRITE_JUMP_LENGTH;
wire           wr_en_DMA_DESC_WRITE_JUMP_LENGTH[1:0];
//============================================================================
//main code
//============================================================================
assign msk = {{8{wr_msk[3]}},{8{wr_msk[2]}},{8{wr_msk[1]}},{8{wr_msk[0]}}};

//============================================================================
// reg wr_en/rd_en assignment
//============================================================================
assign wr_en_DMA_CTRL                      = wr_en & (reg_addr[11:0] == 12'h0);
assign wr_en_DMA_ERR_CLR                   = wr_en & (reg_addr[11:0] == 12'h8);

genvar i;
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_DMA_DESC_MODE
        assign wr_en_DMA_DESC_MODE[i]= wr_en & (reg_addr[11:0] == 12'h20 + 12'h20 * i );
    end
endgenerate
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_DMA_DESC_LENGTH
        assign wr_en_DMA_DESC_LENGTH[i]= wr_en & (reg_addr[11:0] == 12'h24 + 12'h20 * i );
    end
endgenerate
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_DMA_DESC_SRC_ADDR
        assign wr_en_DMA_DESC_SRC_ADDR[i]= wr_en & (reg_addr[11:0] == 12'h28 + 12'h20 * i );
    end
endgenerate
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_DMA_DESC_DST_ADDR
        assign wr_en_DMA_DESC_DST_ADDR[i]= wr_en & (reg_addr[11:0] == 12'h2C + 12'h20 * i );
    end
endgenerate
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_DMA_DESC_READ_JUMP_LENGTH
        assign wr_en_DMA_DESC_READ_JUMP_LENGTH[i]= wr_en & (reg_addr[11:0] == 12'h30 + 12'h20 * i );
    end
endgenerate
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_DMA_DESC_WRITE_JUMP_LENGTH
        assign wr_en_DMA_DESC_WRITE_JUMP_LENGTH[i]= wr_en & (reg_addr[11:0] == 12'h34 + 12'h20 * i );
    end
endgenerate

//============================================================================
// reg write
//============================================================================
//============================================================================
// csr_dma_maxburst addr:12'h0 type:RW bits:[15:8] default:8'h7
//============================================================================
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        csr_dma_maxburst[7:0] <= 8'h7;
    else begin
        if (wr_en_DMA_CTRL == 1'b1)
            csr_dma_maxburst[7:0] <= (csr_dma_maxburst[7:0] & ~msk[15:8]) | (wr_data[15:8] & msk[15:8]);
    end
end

//============================================================================
// csr_dma_start addr:12'h0 type:RW bits:[0] default:1'b0
//============================================================================
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        csr_dma_start <= 1'b0;
    else begin
        if (wr_en_DMA_CTRL == 1'b1)
            csr_dma_start <= (csr_dma_start & ~msk[0]) | (wr_data[0] & msk[0]);
    end
end

//============================================================================
// csr_dma_err_clr addr:12'h8 type:W1P bits:[0] default:1'b0
//============================================================================
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        csr_dma_err_clr <= 1'b0;
    else begin
        if (wr_en_DMA_ERR_CLR == 1'b1)
            csr_dma_err_clr <= wr_data[0] & msk[0];
        else
            csr_dma_err_clr <= 1'b0;
    end
end

//============================================================================
// csr_desc_read_mode addr:12'h20 type:RW bits:[2] default:1'b0
//============================================================================
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_csr_desc_read_mode
        always @(posedge clk or negedge rst_n) begin
            if (!rst_n)
                csr_desc_read_mode[i] <= 1'b0;
            else begin
                if (wr_en_DMA_DESC_MODE[i] == 1'b1)
                    csr_desc_read_mode[i] <= (csr_desc_read_mode[i] & ~msk[2]) | (wr_data[2] & msk[2]);
            end
        end
    end
endgenerate
//============================================================================
// csr_desc_write_mode addr:12'h20 type:RW bits:[1] default:1'b0
//============================================================================
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_csr_desc_write_mode
        always @(posedge clk or negedge rst_n) begin
            if (!rst_n)
                csr_desc_write_mode[i] <= 1'b0;
            else begin
                if (wr_en_DMA_DESC_MODE[i] == 1'b1)
                    csr_desc_write_mode[i] <= (csr_desc_write_mode[i] & ~msk[1]) | (wr_data[1] & msk[1]);
            end
        end
    end
endgenerate
//============================================================================
// csr_desc_enable addr:12'h20 type:RW bits:[0] default:1'b0
//============================================================================
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_csr_desc_enable
        always @(posedge clk or negedge rst_n) begin
            if (!rst_n)
                csr_desc_enable[i] <= 1'b0;
            else begin
                if (wr_en_DMA_DESC_MODE[i] == 1'b1)
                    csr_desc_enable[i] <= (csr_desc_enable[i] & ~msk[0]) | (wr_data[0] & msk[0]);
            end
        end
    end
endgenerate
//============================================================================
// rd_data_nxt_DMA_DESC_MODE
//============================================================================
integer j;
always @(*) begin
    rd_data_nxt_DMA_DESC_MODE[31:0]  = 32'h0;
    for(j = 0; j <= 1; j = j + 1) begin:rdata_loop_DMA_DESC_MODE
        if (reg_addr[11:0] == 12'h20 + 12'h20 * j) begin
            rd_data_nxt_DMA_DESC_MODE[2] = csr_desc_read_mode[j];
            rd_data_nxt_DMA_DESC_MODE[1] = csr_desc_write_mode[j];
            rd_data_nxt_DMA_DESC_MODE[0] = csr_desc_enable[j];
        end
    end
end

//============================================================================
// csr_desc_num_bytes addr:12'h24 type:RW bits:[31:0] default:32'b0
//============================================================================
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_csr_desc_num_bytes
        always @(posedge clk or negedge rst_n) begin
            if (!rst_n)
                csr_desc_num_bytes[i] <= 32'b0;
            else begin
                if (wr_en_DMA_DESC_LENGTH[i] == 1'b1)
                    csr_desc_num_bytes[i][31:0] <= (csr_desc_num_bytes[i][31:0] & ~msk[31:0]) | (wr_data[31:0] & msk[31:0]);
            end
        end
    end
endgenerate
//============================================================================
// rd_data_nxt_DMA_DESC_LENGTH
//============================================================================
always @(*) begin
    rd_data_nxt_DMA_DESC_LENGTH[31:0]  = 32'h0;
    for(j = 0; j <= 1; j = j + 1) begin:rdata_loop_DMA_DESC_LENGTH
        if (reg_addr[11:0] == 12'h24 + 12'h20 * j) begin
            rd_data_nxt_DMA_DESC_LENGTH[31:0] = csr_desc_num_bytes[j][31:0];
        end
    end
end

//============================================================================
// csr_desc_src_addr addr:12'h28 type:RW bits:[31:0] default:32'b0
//============================================================================
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_csr_desc_src_addr
        always @(posedge clk or negedge rst_n) begin
            if (!rst_n)
                csr_desc_src_addr[i] <= 32'b0;
            else begin
                if (wr_en_DMA_DESC_SRC_ADDR[i] == 1'b1)
                    csr_desc_src_addr[i][31:0] <= (csr_desc_src_addr[i][31:0] & ~msk[31:0]) | (wr_data[31:0] & msk[31:0]);
            end
        end
    end
endgenerate
//============================================================================
// rd_data_nxt_DMA_DESC_SRC_ADDR
//============================================================================
always @(*) begin
    rd_data_nxt_DMA_DESC_SRC_ADDR[31:0]  = 32'h0;
    for(j = 0; j <= 1; j = j + 1) begin:rdata_loop_DMA_DESC_SRC_ADDR
        if (reg_addr[11:0] == 12'h28 + 12'h20 * j) begin
            rd_data_nxt_DMA_DESC_SRC_ADDR[31:0] = csr_desc_src_addr[j][31:0];
        end
    end
end

//============================================================================
// csr_desc_dst_addr addr:12'h2C type:RW bits:[31:0] default:32'b0
//============================================================================
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_csr_desc_dst_addr
        always @(posedge clk or negedge rst_n) begin
            if (!rst_n)
                csr_desc_dst_addr[i] <= 32'b0;
            else begin
                if (wr_en_DMA_DESC_DST_ADDR[i] == 1'b1)
                    csr_desc_dst_addr[i][31:0] <= (csr_desc_dst_addr[i][31:0] & ~msk[31:0]) | (wr_data[31:0] & msk[31:0]);
            end
        end
    end
endgenerate
//============================================================================
// rd_data_nxt_DMA_DESC_DST_ADDR
//============================================================================
always @(*) begin
    rd_data_nxt_DMA_DESC_DST_ADDR[31:0]  = 32'h0;
    for(j = 0; j <= 1; j = j + 1) begin:rdata_loop_DMA_DESC_DST_ADDR
        if (reg_addr[11:0] == 12'h2C + 12'h20 * j) begin
            rd_data_nxt_DMA_DESC_DST_ADDR[31:0] = csr_desc_dst_addr[j][31:0];
        end
    end
end

//============================================================================
// csr_desc_read_jump_bytes addr:12'h30 type:RW bits:[31:0] default:32'b0
//============================================================================
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_csr_desc_read_jump_bytes
        always @(posedge clk or negedge rst_n) begin
            if (!rst_n)
                csr_desc_read_jump_bytes[i] <= 32'b0;
            else begin
                if (wr_en_DMA_DESC_READ_JUMP_LENGTH[i] == 1'b1)
                    csr_desc_read_jump_bytes[i][31:0] <= (csr_desc_read_jump_bytes[i][31:0] & ~msk[31:0]) | (wr_data[31:0] & msk[31:0]);
            end
        end
    end
endgenerate
//============================================================================
// rd_data_nxt_DMA_DESC_READ_JUMP_LENGTH
//============================================================================
always @(*) begin
    rd_data_nxt_DMA_DESC_READ_JUMP_LENGTH[31:0]  = 32'h0;
    for(j = 0; j <= 1; j = j + 1) begin:rdata_loop_DMA_DESC_READ_JUMP_LENGTH
        if (reg_addr[11:0] == 12'h30 + 12'h20 * j) begin
            rd_data_nxt_DMA_DESC_READ_JUMP_LENGTH[31:0] = csr_desc_read_jump_bytes[j][31:0];
        end
    end
end

//============================================================================
// csr_desc_write_jump_bytes addr:12'h34 type:RW bits:[31:0] default:32'b0
//============================================================================
generate
    for(i = 0; i <= 1; i = i + 1) begin: wr_csr_desc_write_jump_bytes
        always @(posedge clk or negedge rst_n) begin
            if (!rst_n)
                csr_desc_write_jump_bytes[i] <= 32'b0;
            else begin
                if (wr_en_DMA_DESC_WRITE_JUMP_LENGTH[i] == 1'b1)
                    csr_desc_write_jump_bytes[i][31:0] <= (csr_desc_write_jump_bytes[i][31:0] & ~msk[31:0]) | (wr_data[31:0] & msk[31:0]);
            end
        end
    end
endgenerate
//============================================================================
// rd_data_nxt_DMA_DESC_WRITE_JUMP_LENGTH
//============================================================================
always @(*) begin
    rd_data_nxt_DMA_DESC_WRITE_JUMP_LENGTH[31:0]  = 32'h0;
    for(j = 0; j <= 1; j = j + 1) begin:rdata_loop_DMA_DESC_WRITE_JUMP_LENGTH
        if (reg_addr[11:0] == 12'h34 + 12'h20 * j) begin
            rd_data_nxt_DMA_DESC_WRITE_JUMP_LENGTH[31:0] = csr_desc_write_jump_bytes[j][31:0];
        end
    end
end

//============================================================================
// next read data
//============================================================================
always @(*) begin
    rd_data_nxt[31:0] = 32'h0;
    case(reg_addr[11:0])
    12'h0: begin
        rd_data_nxt[15:8] = csr_dma_maxburst[7:0];
        rd_data_nxt[0] = csr_dma_start;
    end
    12'h4: begin
        rd_data_nxt[23:8] = csr_dma_version[15:0];
        rd_data_nxt[3:2] = csr_dma_status[1:0];
        rd_data_nxt[1] = csr_dma_err;
        rd_data_nxt[0] = csr_dma_done;
    end
    12'h8: begin
        rd_data_nxt[0] = 1'h0;
    end
    12'hC: begin
        rd_data_nxt[1:0] = csr_dma_err_type[1:0];
    end
    12'h10: begin
        rd_data_nxt[31:0] = csr_dma_err_addr[31:0];
    end
    default: 
        rd_data_nxt = rd_data_nxt_DMA_DESC_MODE | rd_data_nxt_DMA_DESC_LENGTH | rd_data_nxt_DMA_DESC_SRC_ADDR | rd_data_nxt_DMA_DESC_DST_ADDR | rd_data_nxt_DMA_DESC_READ_JUMP_LENGTH | rd_data_nxt_DMA_DESC_WRITE_JUMP_LENGTH;
    endcase
end

//============================================================================
// read data
//============================================================================
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        rd_data[31:0] <= 32'h0; 
    else if(rd_en)
        rd_data[31:0] <= rd_data_nxt[31:0];
end

endmodule